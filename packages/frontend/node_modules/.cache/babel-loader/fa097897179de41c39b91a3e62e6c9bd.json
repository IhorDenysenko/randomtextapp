{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from'axios';import{joinChatRoom}from\"../api/SocketAPI\";import{makeStyles,createStyles,Card,Divider,Button,Typography,CardActions,CardContent,List,ListItem}from'@material-ui/core';import'typeface-roboto';var useStyles=makeStyles(function(theme){return createStyles({card:{height:440,width:300,marginTop:theme.spacing(12),marginRight:theme.spacing(4),display:'flex',flexDirection:'column',alignItems:'center'},card_content:{backgroundColor:theme.palette.background.paper,marginTop:theme.spacing(1),width:300},chatroom_list:{maxHeight:350,overflow:'auto',width:300},button:{display:'block',width:'100%'}});});var ChatroomContainer=function ChatroomContainer(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),chatrooms=_useState2[0],setChatrooms=_useState2[1];var classes=useStyles();useEffect(function(){var loadChatRooms=function loadChatRooms(){axios.get(\"https://randomtextapp.herokuapp.com/api/chatrooms\").then(function(res){var roomdata=res.data;setChatrooms(roomdata);});};loadChatRooms();},[]);var handleChooseChatroom=function handleChooseChatroom(ev){ev.preventDefault();var target=ev.currentTarget.getAttribute('value');joinChatRoom(props.username,target?target:\"\");};return React.createElement(Card,{className:classes.card},React.createElement(CardContent,{className:classes.card_content},React.createElement(Typography,{gutterBottom:true,variant:\"h4\",component:\"h2\"},\" Chatrooms \"),React.createElement(Divider,{orientation:\"horizontal\"})),React.createElement(CardActions,null,React.createElement(List,{className:classes.chatroom_list},chatrooms.map(function(chatroom){return React.createElement(ListItem,null,React.createElement(Button,{onClick:handleChooseChatroom,color:\"primary\",value:chatroom,name:chatroom,fullWidth:true,variant:\"contained\"},chatroom));}))));};export default ChatroomContainer;","map":{"version":3,"sources":["C:/Users/ihord/WebstormProjects/randomtextapp/packages/frontend/src/chat/ChatroomContainer.tsx"],"names":["React","useState","useEffect","axios","joinChatRoom","makeStyles","createStyles","Card","Divider","Button","Typography","CardActions","CardContent","List","ListItem","useStyles","theme","card","height","width","marginTop","spacing","marginRight","display","flexDirection","alignItems","card_content","backgroundColor","palette","background","paper","chatroom_list","maxHeight","overflow","button","ChatroomContainer","props","chatrooms","setChatrooms","classes","loadChatRooms","get","then","res","roomdata","data","handleChooseChatroom","ev","preventDefault","target","currentTarget","getAttribute","username","map","chatroom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport {joinChatRoom} from \"../api/SocketAPI\";\r\nimport {makeStyles, createStyles, Theme, Card, Divider, Button, Typography, CardActions, CardContent, List, ListItem } from '@material-ui/core';\r\nimport 'typeface-roboto';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    card: {\r\n        height: 440,\r\n        width: 300,\r\n        marginTop: theme.spacing(12),\r\n        marginRight: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    card_content: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        marginTop: theme.spacing(1),\r\n        width: 300\r\n    },\r\n    chatroom_list: {\r\n        maxHeight: 350,\r\n        overflow: 'auto',\r\n        width: 300\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        width: '100%'\r\n    },\r\n  }),\r\n);\r\n\r\ninterface Props {\r\n    username: string;\r\n}\r\n\r\nconst ChatroomContainer: React.FC<Props> = (props: Props) => {\r\n\r\n    const [chatrooms, setChatrooms] = useState([]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n\r\n        const loadChatRooms = (): void => {\r\n            axios.get(`https://randomtextapp.herokuapp.com/api/chatrooms`)\r\n                .then(res => {\r\n\r\n                    const roomdata = res.data;\r\n                    setChatrooms(roomdata);\r\n                });\r\n        };\r\n\r\n        loadChatRooms();\r\n\r\n    },[]);\r\n\r\n    const handleChooseChatroom = (ev: React.MouseEvent): void => {\r\n        ev.preventDefault();\r\n\r\n        let target = (ev.currentTarget as HTMLButtonElement).getAttribute('value');\r\n    \r\n        joinChatRoom(props.username, target? target : \"\");\r\n    };\r\n\r\n    return(\r\n            <Card className={classes.card}>\r\n\r\n                <CardContent className={classes.card_content}>\r\n                    <Typography gutterBottom variant=\"h4\" component=\"h2\"> Chatrooms </Typography>  \r\n                    <Divider orientation=\"horizontal\" />\r\n                </CardContent>\r\n                \r\n                <CardActions>              \r\n                <List className={classes.chatroom_list}>\r\n\r\n                    {chatrooms.map(chatroom => {\r\n                        return (\r\n                            <ListItem>       \r\n                                <Button \r\n                                onClick={handleChooseChatroom} \r\n                                color=\"primary\" \r\n                                value={chatroom}\r\n                                name={chatroom}\r\n                                fullWidth\r\n                                variant=\"contained\"> \r\n                                {chatroom}\r\n                                </Button>\r\n                            </ListItem>               \r\n                        );\r\n                    })}                    \r\n                    </List>    \r\n\r\n                </CardActions>\r\n            </Card>\r\n       \r\n    );\r\n\r\n};\r\n\r\nexport default ChatroomContainer;"]},"metadata":{},"sourceType":"module"}