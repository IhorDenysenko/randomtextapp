{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\packages\\\\frontend\\\\src\\\\chat\\\\Chat.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { leaveChatRoom, subscribeToReceiveMessage, unsubscribeToReceiveMessage, sendMessageToChatroom } from '../api/SocketAPI';\nimport axios from \"axios\";\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles, createStyles, TextField, Card, InputAdornment, Grid, Divider, ListItemText, Typography, CardContent, List, ListItem } from '@material-ui/core';\nconst useStyles = makeStyles(theme => createStyles({\n  card: {\n    height: 440,\n    width: 500,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  card_content: {\n    backgroundColor: theme.palette.background.paper,\n    width: 500\n  },\n  chatroom_list: {\n    height: 295,\n    overflow: 'auto',\n    width: 500\n  },\n  footer: {\n    bootom: 0\n  }\n}));\n\nconst Chat = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        chatname = _useState2[0],\n        setChatname = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        message = _useState4[0],\n        setMessage = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messages = _useState6[0],\n        setMessages = _useState6[1];\n\n  const classes = useStyles();\n  useEffect(() => {\n    const loadMessageHistory = name => {\n      axios.get(`https://randomtextapp.herokuapp.com/api/chatrooms/` + name).then(res => {\n        const messageData = res.data;\n        setMessages(messageData);\n      });\n    };\n\n    setChatname(props.name);\n    loadMessageHistory(props.name);\n  }, [chatname]);\n  useEffect(() => {\n    subscribeToReceiveMessage(data => {\n      const arr = [...messages, data];\n      setMessages(arr);\n    });\n    return () => {\n      unsubscribeToReceiveMessage();\n    };\n  }, [messages]);\n\n  const sendMessage = ev => {\n    ev.preventDefault();\n\n    if (message === '') {\n      return;\n    }\n\n    sendMessageToChatroom(props.username, chatname, message);\n    setMessage('');\n  };\n\n  const handleLeaveRoom = ev => {\n    ev.preventDefault();\n    leaveChatRoom(props.username, chatname);\n  };\n\n  return React.createElement(Card, {\n    className: classes.card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    className: classes.card_content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h4\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \" \", chatname, \" \")), React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleLeaveRoom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(CloseIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })))), React.createElement(Divider, {\n    orientation: \"horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(List, {\n    className: classes.chatroom_list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, messages.map(messag => {\n    return React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: messag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }))))), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    orientation: \"horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    id: \"message\",\n    label: \"Message\",\n    name: \"message\",\n    autoComplete: \"message\",\n    autoFocus: true,\n    fullWidth: true,\n    value: message,\n    onChange: ev => setMessage(ev.target.value),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: sendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(CommentIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })))));\n};\n\nexport default Chat;\n/*\r\n  {messages.map(messag => {\r\n                                return (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={messag} />                            \r\n                                    </ListItem>      \r\n                                )\r\n                            })}\r\n\r\n*/","map":{"version":3,"sources":["C:/Users/ihord/WebstormProjects/randomtextapp/packages/frontend/src/chat/Chat.tsx"],"names":["React","useState","useEffect","leaveChatRoom","subscribeToReceiveMessage","unsubscribeToReceiveMessage","sendMessageToChatroom","axios","IconButton","CommentIcon","CloseIcon","makeStyles","createStyles","TextField","Card","InputAdornment","Grid","Divider","ListItemText","Typography","CardContent","List","ListItem","useStyles","theme","card","height","width","display","flexDirection","alignItems","card_content","backgroundColor","palette","background","paper","chatroom_list","overflow","footer","bootom","Chat","props","chatname","setChatname","message","setMessage","messages","setMessages","classes","loadMessageHistory","name","get","then","res","messageData","data","arr","sendMessage","ev","preventDefault","username","handleLeaveRoom","map","messag","target","value","endAdornment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, MouseEvent } from \"react\";\r\nimport  {leaveChatRoom, subscribeToReceiveMessage, unsubscribeToReceiveMessage, sendMessageToChatroom} from '../api/SocketAPI';\r\nimport axios from \"axios\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport {makeStyles, createStyles, Theme, TextField, Card, InputAdornment, Grid, Divider, ListItemText, Typography, CardContent, List, ListItem } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    card: {\r\n        height: 440,\r\n        width: 500,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    card_content: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: 500\r\n    },\r\n    chatroom_list: {\r\n        height: 295,\r\n        overflow: 'auto',\r\n        width: 500\r\n    },\r\n    footer: {\r\n        bootom: 0\r\n    },\r\n  }),\r\n);\r\n\r\ninterface Props {\r\n    username: string;\r\n    name: string;\r\n}\r\n\r\nconst Chat: React.FC<Props> = (props) => {\r\n\r\n    const [chatname, setChatname] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([] as  string[]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n\r\n        const loadMessageHistory = (name: string) => {\r\n            axios.get(`https://randomtextapp.herokuapp.com/api/chatrooms/`+name)\r\n                .then(res => {\r\n                    const messageData = res.data;\r\n                    setMessages(messageData);\r\n                });\r\n        };\r\n\r\n        setChatname(props.name);\r\n        loadMessageHistory(props.name);\r\n\r\n    },[chatname]);\r\n\r\n    useEffect(() => {\r\n\r\n        subscribeToReceiveMessage((data: string) => {\r\n            const arr = [...messages, data];\r\n            setMessages(arr);\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeToReceiveMessage();\r\n        };\r\n    },[messages]);\r\n\r\n    const sendMessage = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        if(message === ''){\r\n            return;\r\n        }\r\n\r\n        sendMessageToChatroom(props.username, chatname, message);\r\n\r\n        setMessage('');\r\n    };\r\n\r\n    const handleLeaveRoom = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        leaveChatRoom(props.username, chatname);\r\n    };\r\n\r\n\r\n    return (\r\n        <Card  className={classes.card}>\r\n\r\n            <CardContent className={classes.card_content}>\r\n\r\n                <Grid container justify=\"center\" alignItems=\"center\">     \r\n                    <Grid item xs={11}>       \r\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\"> {chatname} </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={1}> \r\n                        <IconButton onClick={handleLeaveRoom}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </Grid>\r\n                </Grid>  \r\n                <Divider orientation=\"horizontal\" />   \r\n\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <List className={classes.chatroom_list}>\r\n                            <Grid item xs={12}>\r\n\r\n                                {messages.map(messag => {\r\n                                    return (\r\n                                        <ListItem>\r\n                                            <ListItemText primary={messag} />                            \r\n                                        </ListItem>      \r\n                                    )\r\n                                })}\r\n                            </Grid>\r\n                        </List>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n          \r\n                <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                        <Divider orientation=\"horizontal\" />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required              \r\n                    id=\"message\"\r\n                    label=\"Message\"\r\n                    name=\"message\"\r\n                    autoComplete=\"message\"\r\n                    autoFocus\r\n                    fullWidth\r\n                    value={message} \r\n                    onChange={ev => setMessage(ev.target.value)}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position='end'>\r\n                                <IconButton  onClick={sendMessage}>\r\n                                    <CommentIcon />\r\n                                </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                />\r\n                </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            \r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n\r\n/*\r\n  {messages.map(messag => {\r\n                                return (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={messag} />                            \r\n                                    </ListItem>      \r\n                                )\r\n                            })}\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}