{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{loadMessageHistory,leaveChatRoom,subscribeToReceiveMessage,unsubscribeToReceiveMessage,sendMessageToChatroom}from'../api/SocketAPI';import IconButton from'@material-ui/core/IconButton';import CommentIcon from'@material-ui/icons/Comment';import CloseIcon from'@material-ui/icons/Close';import{makeStyles,createStyles,TextField,Card,InputAdornment,Grid,Divider,ListItemText,Typography,CardContent,List,ListItem}from'@material-ui/core';var useStyles=makeStyles(function(theme){return createStyles({card:{height:440,width:500,display:'flex',flexDirection:'column',alignItems:'center'},card_content:{backgroundColor:theme.palette.background.paper,width:500},chatroom_list:{height:295,overflow:'auto',width:500},footer:{bootom:0}});});var Chat=function Chat(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var classes=useStyles();useEffect(function(){loadMessageHistory(props.name,function(data){setMessages(data);});},[props.name]);useEffect(function(){subscribeToReceiveMessage(function(data){setMessages([].concat(_toConsumableArray(messages),[data]));});return function(){unsubscribeToReceiveMessage();};},[messages]);return React.createElement(Card,{className:classes.card},React.createElement(CardContent,{className:classes.card_content},React.createElement(ChatHeader,{username:props.username,name:props.name,handleLeaveChat:props.handleLeaveChat}),React.createElement(Divider,{orientation:\"horizontal\"}),React.createElement(ChatBody,{messages:messages}),React.createElement(ChatFooter,{username:props.username,name:props.name})));};var ChatHeader=function ChatHeader(props){var handleLeaveRoom=function handleLeaveRoom(ev){ev.preventDefault();leaveChatRoom(props.username,props.name);props.handleLeaveChat('');};return React.createElement(Grid,{container:true,justify:\"center\",alignItems:\"center\"},React.createElement(Grid,{item:true,xs:11},React.createElement(Typography,{gutterBottom:true,variant:\"h4\",component:\"h2\"},\" \",props.name,\" \")),React.createElement(Grid,{item:true,xs:1},React.createElement(IconButton,{onClick:handleLeaveRoom},React.createElement(CloseIcon,null))));};var ChatBody=function ChatBody(props){var classes=useStyles();console.log(props.messages);return React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:12},React.createElement(List,{className:classes.chatroom_list},React.createElement(Grid,{item:true,xs:12},props.messages.map(function(messag){return React.createElement(ListItem,null,React.createElement(ListItemText,{primary:messag}));})))));};var ChatFooter=function ChatFooter(props){var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),message=_useState4[0],setMessage=_useState4[1];var sendMessage=function sendMessage(ev){ev.preventDefault();if(message===''){return;}sendMessageToChatroom(props.username,props.name,message);setMessage('');};return React.createElement(Grid,{container:true,justify:\"center\",alignItems:\"center\"},React.createElement(Grid,{item:true,xs:12},React.createElement(Divider,{orientation:\"horizontal\"})),React.createElement(Grid,{item:true,xs:12},React.createElement(TextField,{variant:\"outlined\",margin:\"normal\",required:true,id:\"message\",label:\"Message\",name:\"message\",autoComplete:\"message\",autoFocus:true,fullWidth:true,value:message,onChange:function onChange(ev){return setMessage(ev.target.value);},InputProps:{endAdornment:React.createElement(InputAdornment,{position:\"end\"},React.createElement(IconButton,{onClick:sendMessage},React.createElement(CommentIcon,null)))}})));};export default Chat;","map":{"version":3,"sources":["C:/Users/ihord/WebstormProjects/randomtextapp/packages/frontend/src/chat/Chat.tsx"],"names":["React","useState","useEffect","loadMessageHistory","leaveChatRoom","subscribeToReceiveMessage","unsubscribeToReceiveMessage","sendMessageToChatroom","IconButton","CommentIcon","CloseIcon","makeStyles","createStyles","TextField","Card","InputAdornment","Grid","Divider","ListItemText","Typography","CardContent","List","ListItem","useStyles","theme","card","height","width","display","flexDirection","alignItems","card_content","backgroundColor","palette","background","paper","chatroom_list","overflow","footer","bootom","Chat","props","messages","setMessages","classes","name","data","username","handleLeaveChat","ChatHeader","handleLeaveRoom","ev","preventDefault","ChatBody","console","log","map","messag","ChatFooter","message","setMessage","sendMessage","target","value","endAdornment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, MouseEvent } from \"react\";\r\nimport { loadMessageHistory, leaveChatRoom, subscribeToReceiveMessage, unsubscribeToReceiveMessage, sendMessageToChatroom } from '../api/SocketAPI';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { makeStyles, createStyles, Theme, TextField, Card, InputAdornment, Grid, Divider, ListItemText, Typography, CardContent, List, ListItem } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            height: 440,\r\n            width: 500,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        },\r\n        card_content: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            width: 500\r\n        },\r\n        chatroom_list: {\r\n            height: 295,\r\n            overflow: 'auto',\r\n            width: 500\r\n        },\r\n        footer: {\r\n            bootom: 0\r\n        },\r\n    }),\r\n);\r\n\r\ninterface ChatProps {\r\n    username: string;\r\n    name: string;\r\n    handleLeaveChat: (data: string) => void;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = (props: ChatProps) => {\r\n\r\n    const [messages, setMessages] = useState([] as string[]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n\r\n        loadMessageHistory(props.name, (data: string[]) => {\r\n            setMessages(data);\r\n        });\r\n\r\n    }, [props.name]);\r\n\r\n    useEffect(() => {\r\n\r\n        subscribeToReceiveMessage((data: string) => {\r\n            setMessages([...messages, data]);\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeToReceiveMessage();\r\n        };\r\n    }, [messages]);\r\n\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n\r\n            <CardContent className={classes.card_content}>\r\n                <ChatHeader username={props.username} name={props.name} handleLeaveChat={props.handleLeaveChat} />\r\n                <Divider orientation=\"horizontal\" />\r\n\r\n                <ChatBody messages={messages} />\r\n\r\n                <ChatFooter username={props.username} name={props.name} />\r\n            </CardContent>\r\n\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\ninterface ChatHeaderProps {\r\n    username: string;\r\n    name: string;\r\n    handleLeaveChat: (data: string) => void;\r\n}\r\n\r\nconst ChatHeader: React.SFC<ChatHeaderProps> = (props: ChatHeaderProps) => {\r\n\r\n    const handleLeaveRoom = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        leaveChatRoom(props.username, props.name);\r\n        props.handleLeaveChat('');\r\n    };\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={11}>\r\n                <Typography gutterBottom variant=\"h4\" component=\"h2\"> {props.name} </Typography>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <IconButton onClick={handleLeaveRoom}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\ninterface ChatBodyProps {\r\n    messages: string[];\r\n}\r\n\r\nconst ChatBody: React.SFC<ChatBodyProps> = (props: ChatBodyProps) => {\r\n    const classes = useStyles();\r\n\r\n    console.log(props.messages);\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <List className={classes.chatroom_list}>\r\n                    <Grid item xs={12}>\r\n                        { \r\n                        props.messages.map(messag => {\r\n                            return (\r\n                                <ListItem>\r\n                                    <ListItemText primary={messag} />\r\n                                </ListItem>\r\n                            )\r\n                        })\r\n                        }\r\n                    </Grid>\r\n                </List>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\n\r\ninterface ChatFooterProps {\r\n    username: string;\r\n    name: string;\r\n}\r\n\r\nconst ChatFooter: React.FC<ChatFooterProps> = (props: ChatFooterProps) => {\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n\r\n    const sendMessage = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        if (message === '') {\r\n            return;\r\n        }\r\n\r\n        sendMessageToChatroom(props.username, props.name, message);\r\n        setMessage('');\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n                <Divider orientation=\"horizontal\" />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    id=\"message\"\r\n                    label=\"Message\"\r\n                    name=\"message\"\r\n                    autoComplete=\"message\"\r\n                    autoFocus\r\n                    fullWidth\r\n                    value={message}\r\n                    onChange={ev => setMessage(ev.target.value)}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position='end'>\r\n                                <IconButton onClick={sendMessage}>\r\n                                    <CommentIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}