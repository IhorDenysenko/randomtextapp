{"version":3,"sources":["../../src/Events.ts","signin/SignIn.tsx","api/SocketAPI.ts","chat/Chat.tsx","chat/ChatContainer.tsx","chat/ChatroomContainer.tsx","app/App.tsx","index.tsx","../../src/index.ts"],"names":["JOIN_ROOM","RECEIVE_MESSAGE","LEAVE_ROOM","JOINED_CHAT","LEFT_CHAT","SEND_MESSAGE","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","width","height","card_content","backgroundColor","palette","background","submit","mainPart","SignIn","props","useState","username","setUsername","classes","Card","className","CardContent","Typography","gutterBottom","component","variant","Divider","orientation","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","value","onChange","ev","target","Button","type","color","onClick","event","preventDefault","onUsernameChange","APP_URL","process","REACT_APP_API_URL","socket","io","createStyles","card","chatroom_list","overflow","footer","bootom","ChatHeader","Grid","container","justify","item","xs","IconButton","chatname","emit","SocketEvents","author","chat","handleLeaveChat","ChatBody","messages","setMessages","useEffect","callback","data","on","off","console","log","a","async","axios","get","then","res","messageData","List","map","messag","ListItem","ListItemText","primary","ChatFooter","message","setMessage","InputProps","endAdornment","InputAdornment","position","chatroom","sendMessageToChatroom","Chat","paper_content","ChatContainer","marginRight","maxHeight","button","ChatroomHeader","ChatroomBody","getButtonValue","elem","val","getAttribute","handleChooseChatroom","currentTarget","handleChangeChat","chatrooms","ChatroomContainer","setChatrooms","roomdata","CardActions","App","setName","setChatname","handleChangeChatname","CssBaseline","Container","maxWidth","n","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9006d34.chunk.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SocketEvents = {\r\n    JOIN_ROOM: 'JOIN_ROOM',\r\n    RECEIVE_MESSAGE: 'RECEIVE_MESSAGE',\r\n    LEAVE_ROOM: 'LEAVE_ROOM',\r\n    JOINED_CHAT: 'JOINED_CHAT',\r\n    LEFT_CHAT: 'LEFT_CHAT',\r\n    SEND_MESSAGE: 'SEND_MESSAGE'\r\n};\r\n//# sourceMappingURL=Events.js.map","import  React, {useState, MouseEvent} from \"react\";\r\nimport {Button, Typography, TextField, makeStyles, Theme, Card, CardContent, Divider} from '@material-ui/core';\r\nimport 'typeface-roboto';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(20),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      width: 300,\r\n      height: 300\r\n    },\r\n    card_content: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n      marginTop: theme.spacing(2),\r\n      height: 50\r\n    },\r\n    mainPart: {\r\n        marginTop: theme.spacing(5)\r\n    },\r\n}));\r\n\r\ninterface SignInProps {\r\n    onUsernameChange: (username: string) => void;\r\n}\r\n\r\nconst SignIn: React.FC<SignInProps> = (props: SignInProps) => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const classes = useStyles();\r\n\r\n    const setUser = (event: MouseEvent): void => {\r\n        event.preventDefault();\r\n\r\n        if (username !== '') {\r\n            props.onUsernameChange(username);\r\n        }\r\n    };\r\n\r\n    return (\r\n        \r\n        <Card className={classes.paper}>\r\n        \r\n            <CardContent  className={classes.card_content}>\r\n\r\n                <Typography gutterBottom component=\"h1\" variant=\"h4\">\r\n                Sign in\r\n                </Typography>\r\n\r\n                <Divider orientation=\"horizontal\" />\r\n\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"username\"\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    autoComplete=\"username\"\r\n                    className={classes.mainPart}\r\n                    autoFocus\r\n                    value={username} \r\n                    onChange={ev => setUsername(ev.target.value)} \r\n                />\r\n         \r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                    onClick={setUser}\r\n                >\r\n                Sign In\r\n                </Button>\r\n\r\n            </CardContent>\r\n        </Card>        \r\n    );\r\n\r\n};\r\n\r\nexport default SignIn;","import io from \"socket.io-client\";\r\nimport axios from \"axios\";\r\nimport {SocketEvents} from \"@randomtext/shared\";\r\n\r\n\r\nexport const APP_URL = process.env.REACT_APP_API_URL? process.env.REACT_APP_API_URL : \"\";\r\n\r\nconst socket = io(APP_URL);\r\n\r\nexport const subscribeToReceiveMessage = (callback: (data: string) => void) => {\r\n    socket.on(SocketEvents.RECEIVE_MESSAGE, (data: string) => callback(data));\r\n};\r\n\r\nexport const unsubscribeToReceiveMessage = () => {\r\n    socket.off(SocketEvents.RECEIVE_MESSAGE);\r\n};\r\n\r\nexport const subscribeToOnJoined = (callback: (data: {chat: string}) => void) => {\r\n    socket.on(SocketEvents.JOINED_CHAT, (data: {chat: string}) => callback(data));\r\n};\r\n\r\nexport const unsubscribeToOnJoined = () => {\r\n    socket.off(SocketEvents.JOINED_CHAT);\r\n};\r\n\r\nexport const subscribeToLeftChat = (callback: (data: {chat: string}) => void) => {\r\n    socket.on(SocketEvents.LEFT_CHAT, (data: {chat: string}) => callback(data));\r\n};\r\n\r\nexport const unsubscribeToLeftChat = () => {\r\n    socket.off(SocketEvents.LEFT_CHAT);\r\n};\r\n\r\nexport const sendMessageToChatroom = (username: string, chatroom: string, message: string) => {\r\n    socket.emit(SocketEvents.SEND_MESSAGE, {\r\n        author: username,\r\n        message: message,\r\n        chat: chatroom\r\n    });\r\n};\r\n\r\nexport const joinChatRoom = (username: string, chatname: string) => {\r\n    socket.emit(SocketEvents.JOIN_ROOM, {\r\n        author: username,\r\n        chat: chatname\r\n    });\r\n};\r\n\r\nexport const leaveChatRoom = (username: string, chatname: string) => {\r\n    socket.emit(SocketEvents.LEAVE_ROOM, {\r\n        author: username,\r\n        chat: chatname\r\n    });\r\n};\r\n\r\nexport const loadMessageHistory = async (name: string, callback: (data: string[]) => void) => {\r\n    await axios.get(APP_URL+'/api/chatrooms/'+name)\r\n        .then(res => {\r\n            const messageData = res.data;\r\n            callback(messageData);\r\n        });\r\n};\r\n\r\nexport const loadChatRoomNames = async (callback: (data: string[]) => void) => {\r\n    await axios.get(APP_URL+`/api/chatrooms`)\r\n        .then(res => {\r\n            const roomdata = res.data;\r\n            callback(roomdata);\r\n        });\r\n};","import React, { useState, useEffect, MouseEvent } from \"react\";\r\nimport { loadMessageHistory, leaveChatRoom, subscribeToReceiveMessage, unsubscribeToReceiveMessage, sendMessageToChatroom } from '../api/SocketAPI';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { makeStyles, createStyles, Theme, TextField, Card, InputAdornment, Grid, Divider, ListItemText, Typography, CardContent, List, ListItem } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            height: 440,\r\n            width: 500,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        },\r\n        card_content: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            width: 500\r\n        },\r\n        chatroom_list: {\r\n            height: 295,\r\n            overflow: 'auto',\r\n            width: 500\r\n        },\r\n        footer: {\r\n            bootom: 0\r\n        },\r\n    }),\r\n);\r\n\r\ninterface ChatProps {\r\n    username: string;\r\n    name: string;\r\n    handleLeaveChat: (data: string) => void;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = (props: ChatProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n   \r\n    return (\r\n        <Card className={classes.card}>\r\n\r\n            <CardContent className={classes.card_content}>\r\n                <ChatHeader username={props.username} name={props.name} handleLeaveChat={props.handleLeaveChat} />\r\n                <Divider orientation=\"horizontal\" />\r\n\r\n                <ChatBody name={props.name} />\r\n\r\n                <ChatFooter username={props.username} name={props.name} />\r\n            </CardContent>\r\n\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\ninterface ChatHeaderProps {\r\n    username: string;\r\n    name: string;\r\n    handleLeaveChat: (data: string) => void;\r\n}\r\n\r\nconst ChatHeader: React.SFC<ChatHeaderProps> = (props: ChatHeaderProps) => {\r\n\r\n    const handleLeaveRoom = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        leaveChatRoom(props.username, props.name);\r\n        props.handleLeaveChat('');\r\n    };\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={11}>\r\n                <Typography gutterBottom variant=\"h4\" component=\"h2\"> {props.name} </Typography>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <IconButton onClick={handleLeaveRoom}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\ninterface ChatBodyProps {\r\n    name: string;\r\n}\r\n\r\nconst ChatBody: React.SFC<ChatBodyProps> = (props: ChatBodyProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [messages, setMessages] = useState([] as string[]);\r\n\r\n    useEffect(() => {\r\n\r\n        subscribeToReceiveMessage((data: string) => {\r\n            setMessages([...messages, data]);\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeToReceiveMessage();\r\n        };\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n\r\n        loadMessageHistory(props.name, (data: string[]) => {\r\n            console.log(data);\r\n            setMessages(data);\r\n        });\r\n\r\n    }, [props.name]);\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <List className={classes.chatroom_list}>\r\n                    <Grid item xs={12}>\r\n                        { \r\n                        messages.map(messag => {\r\n                            return (\r\n                                <ListItem>\r\n                                    <ListItemText primary={messag} />\r\n                                </ListItem>\r\n                            )\r\n                        })\r\n                        }\r\n                    </Grid>\r\n                </List>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\n\r\ninterface ChatFooterProps {\r\n    username: string;\r\n    name: string;\r\n}\r\n\r\nconst ChatFooter: React.FC<ChatFooterProps> = (props: ChatFooterProps) => {\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n\r\n    const sendMessage = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        if (message === '') {\r\n            return;\r\n        }\r\n\r\n        sendMessageToChatroom(props.username, props.name, message);\r\n        setMessage('');\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n                <Divider orientation=\"horizontal\" />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    id=\"message\"\r\n                    label=\"Message\"\r\n                    name=\"message\"\r\n                    autoComplete=\"message\"\r\n                    autoFocus\r\n                    fullWidth\r\n                    value={message}\r\n                    onChange={ev => setMessage(ev.target.value)}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position='end'>\r\n                                <IconButton onClick={sendMessage}>\r\n                                    <CommentIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport Chat from \"./Chat\";\r\nimport { makeStyles, createStyles, Theme, Typography, Card } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            height: 440,\r\n            width: 500,\r\n            marginTop: theme.spacing(12),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        },\r\n        paper_content: {\r\n            marginTop: theme.spacing(24),\r\n            alignItems: 'center'\r\n        },\r\n    }),\r\n);\r\n\r\n\r\ninterface ChatContainerProps {\r\n    username: string;\r\n    name: string;\r\n    handleLeaveChat: (data: string) => void;\r\n}\r\n\r\nconst ChatContainer: React.SFC<ChatContainerProps> = (props: ChatContainerProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n    return (\r\n        <Card className={classes.paper}>\r\n            {\r\n                props.name !== '' ? (\r\n                    <Chat username={props.username} name={props.name} handleLeaveChat={props.handleLeaveChat} />\r\n                )\r\n                :\r\n                (\r\n                    <Typography className={classes.paper_content} variant=\"h4\" component=\"h2\"> Join Chat And Start Messaging </Typography>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ChatContainer;","import React, { useState, useEffect } from \"react\";\r\nimport { loadChatRoomNames, joinChatRoom } from \"../api/SocketAPI\";\r\nimport { makeStyles, createStyles, Theme, Card, Divider, Button, Typography, CardActions, CardContent, List, ListItem } from '@material-ui/core';\r\nimport 'typeface-roboto';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            height: 440,\r\n            width: 300,\r\n            marginTop: theme.spacing(12),\r\n            marginRight: theme.spacing(4),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        },\r\n        card_content: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            marginTop: theme.spacing(1),\r\n            width: 300\r\n        },\r\n        chatroom_list: {\r\n            maxHeight: 350,\r\n            overflow: 'auto',\r\n            width: 300\r\n        },\r\n        button: {\r\n            display: 'block',\r\n            width: '100%'\r\n        },\r\n    }),\r\n);\r\n\r\ninterface ChatroomContainerProps {\r\n    username: string;\r\n    handleChangeChat: (data: string) => void;\r\n}\r\n\r\nconst ChatroomContainer: React.FC<ChatroomContainerProps> = (props: ChatroomContainerProps) => {\r\n\r\n    const [chatrooms, setChatrooms] = useState([] as string[]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n\r\n        loadChatRoomNames((data: string[]) => {\r\n            setChatrooms(data);\r\n        });\r\n\r\n    }, []);\r\n\r\n   \r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n\r\n            <ChatroomHeader />\r\n\r\n            <CardActions>\r\n               \r\n               <ChatroomBody username={props.username} chatrooms={chatrooms} handleChangeChat={props.handleChangeChat} />\r\n\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ChatroomHeader: React.SFC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <CardContent className={classes.card_content}>\r\n            <Typography gutterBottom variant=\"h4\" component=\"h2\"> Chatrooms </Typography>\r\n            <Divider orientation=\"horizontal\" />\r\n        </CardContent>\r\n    );\r\n\r\n};\r\n\r\ninterface ChatroomContainerBodyProps {\r\n    username: string;\r\n    chatrooms: string[];\r\n    handleChangeChat: (data: string) => void;\r\n}\r\n\r\nconst ChatroomBody: React.SFC<ChatroomContainerBodyProps> = (props: ChatroomContainerBodyProps) => {\r\n    const classes = useStyles();\r\n\r\n    const getButtonValue = (elem: HTMLButtonElement): string => {\r\n        const val = elem.getAttribute('value');\r\n        return val ? val : '';\r\n    };\r\n\r\n    const handleChooseChatroom = (ev: React.MouseEvent): void => {\r\n        ev.preventDefault();\r\n\r\n        joinChatRoom(props.username, getButtonValue(ev.currentTarget as HTMLButtonElement));\r\n        props.handleChangeChat(getButtonValue(ev.currentTarget as HTMLButtonElement));\r\n    };\r\n\r\n\r\n    return (\r\n        <List className={classes.chatroom_list}>\r\n\r\n            {props.chatrooms.map(chatroom => {\r\n                return (\r\n                    <ListItem>\r\n                        <Button\r\n                            onClick={handleChooseChatroom}\r\n                            color=\"primary\"\r\n                            value={chatroom}\r\n                            name={chatroom}\r\n                            fullWidth\r\n                            variant=\"contained\">\r\n                            {chatroom}\r\n                        </Button>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default ChatroomContainer;","import React, {useState, useEffect} from 'react';\r\nimport SignIn from \"../signin/SignIn\";\r\nimport ChatContainer from \"../chat/ChatContainer\";\r\nimport ChatroomContainer from \"../chat/ChatroomContainer\";\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport 'typeface-roboto';\r\n\r\nconst App: React.FC = () => {\r\n\r\n\tconst [name, setName] = useState('');\r\n\tconst [chatname, setChatname] = useState('');\r\n\r\n\tconst handleChangeChatname = (data: string): void => setChatname(data);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<Container maxWidth=\"md\">\r\n\t\t\t\t{\r\n\t\t\t\t\tname !== '' ? (\r\n\r\n\t\t\t\t\t\t<Grid container alignItems=\"center\">\r\n\t\t\t\t\t\t\t<ChatroomContainer username={name} handleChangeChat={handleChangeChatname} />\r\n\t\t\t\t\t\t\t<ChatContainer username={name} name={chatname} handleLeaveChat={handleChangeChatname}/>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Grid container alignItems=\"center\" justify=\"center\">\r\n\t\t\t\t\t\t\t\t<SignIn onUsernameChange={n => setName(n)} />\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</Container>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./Events\"));\r\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}