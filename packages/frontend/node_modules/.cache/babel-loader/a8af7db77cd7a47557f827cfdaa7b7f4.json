{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{loadChatRoomNames,joinChatRoom}from\"../api/SocketAPI\";import{makeStyles,createStyles,Card,Divider,Button,Typography,CardActions,CardContent,List,ListItem}from'@material-ui/core';import'typeface-roboto';var useStyles=makeStyles(function(theme){return createStyles({card:{height:440,width:300,marginTop:theme.spacing(12),marginRight:theme.spacing(4),display:'flex',flexDirection:'column',alignItems:'center'},card_content:{backgroundColor:theme.palette.background.paper,marginTop:theme.spacing(1),width:300},chatroom_list:{maxHeight:350,overflow:'auto',width:300},button:{display:'block',width:'100%'}});});var ChatroomContainer=function ChatroomContainer(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),chatrooms=_useState2[0],setChatrooms=_useState2[1];var classes=useStyles();useEffect(function(){loadChatRoomNames(function(data){setChatrooms(data);});},[]);return React.createElement(Card,{className:classes.card},React.createElement(ChatroomHeader,null),React.createElement(CardActions,null,React.createElement(ChatroomBody,{username:props.username,chatrooms:chatrooms,handleChangeChat:props.handleChangeChat})));};var ChatroomHeader=function ChatroomHeader(){var classes=useStyles();return React.createElement(CardContent,{className:classes.card_content},React.createElement(Typography,{gutterBottom:true,variant:\"h4\",component:\"h2\"},\" Chatrooms \"),React.createElement(Divider,{orientation:\"horizontal\"}));};var ChatroomBody=function ChatroomBody(props){var classes=useStyles();var getButtonValue=function getButtonValue(elem){var val=elem.getAttribute('value');return val?val:'';};var handleChooseChatroom=function handleChooseChatroom(ev){ev.preventDefault();joinChatRoom(props.username,getButtonValue(ev.target));props.handleChangeChat(getButtonValue(ev.target));};return React.createElement(List,{className:classes.chatroom_list},props.chatrooms.map(function(chatroom){return React.createElement(ListItem,null,React.createElement(Button,{onClick:handleChooseChatroom,color:\"primary\",value:chatroom,name:chatroom,fullWidth:true,variant:\"contained\"},chatroom));}));};export default ChatroomContainer;","map":{"version":3,"sources":["C:/Users/ihord/WebstormProjects/randomtextapp/packages/frontend/src/chat/ChatroomContainer.tsx"],"names":["React","useState","useEffect","loadChatRoomNames","joinChatRoom","makeStyles","createStyles","Card","Divider","Button","Typography","CardActions","CardContent","List","ListItem","useStyles","theme","card","height","width","marginTop","spacing","marginRight","display","flexDirection","alignItems","card_content","backgroundColor","palette","background","paper","chatroom_list","maxHeight","overflow","button","ChatroomContainer","props","chatrooms","setChatrooms","classes","data","username","handleChangeChat","ChatroomHeader","ChatroomBody","getButtonValue","elem","val","getAttribute","handleChooseChatroom","ev","preventDefault","target","map","chatroom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { loadChatRoomNames, joinChatRoom } from \"../api/SocketAPI\";\r\nimport { makeStyles, createStyles, Theme, Card, Divider, Button, Typography, CardActions, CardContent, List, ListItem } from '@material-ui/core';\r\nimport 'typeface-roboto';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            height: 440,\r\n            width: 300,\r\n            marginTop: theme.spacing(12),\r\n            marginRight: theme.spacing(4),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        },\r\n        card_content: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            marginTop: theme.spacing(1),\r\n            width: 300\r\n        },\r\n        chatroom_list: {\r\n            maxHeight: 350,\r\n            overflow: 'auto',\r\n            width: 300\r\n        },\r\n        button: {\r\n            display: 'block',\r\n            width: '100%'\r\n        },\r\n    }),\r\n);\r\n\r\ninterface ChatroomContainerProps {\r\n    username: string;\r\n    handleChangeChat: (data: string) => void;\r\n}\r\n\r\nconst ChatroomContainer: React.FC<ChatroomContainerProps> = (props: ChatroomContainerProps) => {\r\n\r\n    const [chatrooms, setChatrooms] = useState([] as string[]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n\r\n        loadChatRoomNames((data: string[]) => {\r\n            setChatrooms(data);\r\n        });\r\n\r\n    }, []);\r\n\r\n   \r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n\r\n            <ChatroomHeader />\r\n\r\n            <CardActions>\r\n               \r\n               <ChatroomBody username={props.username} chatrooms={chatrooms} handleChangeChat={props.handleChangeChat} />\r\n\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ChatroomHeader: React.SFC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <CardContent className={classes.card_content}>\r\n            <Typography gutterBottom variant=\"h4\" component=\"h2\"> Chatrooms </Typography>\r\n            <Divider orientation=\"horizontal\" />\r\n        </CardContent>\r\n    );\r\n\r\n};\r\n\r\ninterface ChatroomContainerBodyProps {\r\n    username: string;\r\n    chatrooms: string[];\r\n    handleChangeChat: (data: string) => void;\r\n}\r\n\r\nconst ChatroomBody: React.SFC<ChatroomContainerBodyProps> = (props: ChatroomContainerBodyProps) => {\r\n    const classes = useStyles();\r\n\r\n    const getButtonValue = (elem: HTMLButtonElement): string => {\r\n        const val = elem.getAttribute('value');\r\n        return val ? val : '';\r\n    };\r\n\r\n    const handleChooseChatroom = (ev: React.MouseEvent): void => {\r\n        ev.preventDefault();\r\n\r\n        joinChatRoom(props.username, getButtonValue(ev.target as HTMLButtonElement));\r\n        props.handleChangeChat(getButtonValue(ev.target as HTMLButtonElement));\r\n    };\r\n\r\n\r\n    return (\r\n        <List className={classes.chatroom_list}>\r\n\r\n            {props.chatrooms.map(chatroom => {\r\n                return (\r\n                    <ListItem>\r\n                        <Button\r\n                            onClick={handleChooseChatroom}\r\n                            color=\"primary\"\r\n                            value={chatroom}\r\n                            name={chatroom}\r\n                            fullWidth\r\n                            variant=\"contained\">\r\n                            {chatroom}\r\n                        </Button>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default ChatroomContainer;"]},"metadata":{},"sourceType":"module"}