{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\ihord\\\\WebstormProjects\\\\randomtextapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{leaveChatRoom,subscribeToReceiveMessage,unsubscribeToReceiveMessage,sendMessageToChatroom}from'../api/SocketAPI';import axios from\"axios\";import IconButton from'@material-ui/core/IconButton';import CommentIcon from'@material-ui/icons/Comment';import CloseIcon from'@material-ui/icons/Close';import{makeStyles,createStyles,TextField,Card,InputAdornment,Grid,Divider,ListItemText,Typography,CardContent,List,ListItem}from'@material-ui/core';var useStyles=makeStyles(function(theme){return createStyles({card:{height:440,width:500,display:'flex',flexDirection:'column',alignItems:'center'},card_content:{backgroundColor:theme.palette.background.paper,width:500},chatroom_list:{height:295,overflow:'auto',width:500},footer:{bootom:0}});});var Chat=function Chat(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),chatname=_useState2[0],setChatname=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),message=_useState4[0],setMessage=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),messages=_useState6[0],setMessages=_useState6[1];var classes=useStyles();useEffect(function(){var loadMessageHistory=function loadMessageHistory(name){axios.get(\"https://randomtextapp.herokuapp.com/api/chatrooms/\"+name).then(function(res){var messageData=res.data;setMessages(messageData);});};setChatname(props.name);loadMessageHistory(props.name);},[chatname]);useEffect(function(){subscribeToReceiveMessage(function(data){var arr=[].concat(_toConsumableArray(messages),[data]);setMessages(arr);});return function(){unsubscribeToReceiveMessage();};},[messages]);var sendMessage=function sendMessage(ev){ev.preventDefault();if(message===''){return;}sendMessageToChatroom(props.username,chatname,message);setMessage('');};var handleLeaveRoom=function handleLeaveRoom(ev){ev.preventDefault();leaveChatRoom(props.username,chatname);};return React.createElement(Card,{className:classes.card},React.createElement(CardContent,{className:classes.card_content},React.createElement(Grid,{container:true,justify:\"center\",alignItems:\"center\"},React.createElement(Grid,{item:true,xs:11},React.createElement(Typography,{gutterBottom:true,variant:\"h4\",component:\"h2\"},\" \",chatname,\" \")),React.createElement(Grid,{item:true,xs:1},React.createElement(IconButton,{onClick:handleLeaveRoom},React.createElement(CloseIcon,null)))),React.createElement(Divider,{orientation:\"horizontal\"}),React.createElement(Grid,{container:true},React.createElement(Grid,{item:true,xs:12},React.createElement(List,{className:classes.chatroom_list},React.createElement(Grid,{item:true,xs:12},messages.map(function(messag){return React.createElement(ListItem,null,React.createElement(ListItemText,{primary:messag}));}))))),React.createElement(Grid,{container:true,justify:\"center\",alignItems:\"center\"},React.createElement(Grid,{item:true,xs:12},React.createElement(Divider,{orientation:\"horizontal\"})),React.createElement(Grid,{item:true,xs:12},React.createElement(TextField,{variant:\"outlined\",margin:\"normal\",required:true,id:\"message\",label:\"Message\",name:\"message\",autoComplete:\"message\",autoFocus:true,fullWidth:true,value:message,onChange:function onChange(ev){return setMessage(ev.target.value);},InputProps:{endAdornment:React.createElement(InputAdornment,{position:\"end\"},React.createElement(IconButton,{onClick:sendMessage},React.createElement(CommentIcon,null)))}})))));};export default Chat;/*\r\n  {messages.map(messag => {\r\n                                return (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={messag} />                            \r\n                                    </ListItem>      \r\n                                )\r\n                            })}\r\n\r\n*/","map":{"version":3,"sources":["C:/Users/ihord/WebstormProjects/randomtextapp/packages/frontend/src/chat/Chat.tsx"],"names":["React","useState","useEffect","leaveChatRoom","subscribeToReceiveMessage","unsubscribeToReceiveMessage","sendMessageToChatroom","axios","IconButton","CommentIcon","CloseIcon","makeStyles","createStyles","TextField","Card","InputAdornment","Grid","Divider","ListItemText","Typography","CardContent","List","ListItem","useStyles","theme","card","height","width","display","flexDirection","alignItems","card_content","backgroundColor","palette","background","paper","chatroom_list","overflow","footer","bootom","Chat","props","chatname","setChatname","message","setMessage","messages","setMessages","classes","loadMessageHistory","name","get","then","res","messageData","data","arr","sendMessage","ev","preventDefault","username","handleLeaveRoom","map","messag","target","value","endAdornment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, MouseEvent } from \"react\";\r\nimport  {leaveChatRoom, subscribeToReceiveMessage, unsubscribeToReceiveMessage, sendMessageToChatroom} from '../api/SocketAPI';\r\nimport axios from \"axios\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport {makeStyles, createStyles, Theme, TextField, Card, InputAdornment, Grid, Divider, ListItemText, Typography, CardContent, List, ListItem } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    card: {\r\n        height: 440,\r\n        width: 500,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    card_content: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: 500\r\n    },\r\n    chatroom_list: {\r\n        height: 295,\r\n        overflow: 'auto',\r\n        width: 500\r\n    },\r\n    footer: {\r\n        bootom: 0\r\n    },\r\n  }),\r\n);\r\n\r\ninterface Props {\r\n    username: string;\r\n    name: string;\r\n}\r\n\r\nconst Chat: React.FC<Props> = (props) => {\r\n\r\n    const [chatname, setChatname] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([] as  string[]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n\r\n        const loadMessageHistory = (name: string) => {\r\n            axios.get(`https://randomtextapp.herokuapp.com/api/chatrooms/`+name)\r\n                .then(res => {\r\n                    const messageData = res.data;\r\n                    setMessages(messageData);\r\n                });\r\n        };\r\n\r\n        setChatname(props.name);\r\n        loadMessageHistory(props.name);\r\n\r\n    },[chatname]);\r\n\r\n    useEffect(() => {\r\n\r\n        subscribeToReceiveMessage((data: string) => {\r\n            const arr = [...messages, data];\r\n            setMessages(arr);\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeToReceiveMessage();\r\n        };\r\n    },[messages]);\r\n\r\n    const sendMessage = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        if(message === ''){\r\n            return;\r\n        }\r\n\r\n        sendMessageToChatroom(props.username, chatname, message);\r\n\r\n        setMessage('');\r\n    };\r\n\r\n    const handleLeaveRoom = (ev: MouseEvent) => {\r\n        ev.preventDefault();\r\n\r\n        leaveChatRoom(props.username, chatname);\r\n    };\r\n\r\n\r\n    return (\r\n        <Card  className={classes.card}>\r\n\r\n            <CardContent className={classes.card_content}>\r\n\r\n                <Grid container justify=\"center\" alignItems=\"center\">     \r\n                    <Grid item xs={11}>       \r\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\"> {chatname} </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={1}> \r\n                        <IconButton onClick={handleLeaveRoom}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </Grid>\r\n                </Grid>  \r\n                <Divider orientation=\"horizontal\" />   \r\n\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <List className={classes.chatroom_list}>\r\n                            <Grid item xs={12}>\r\n\r\n                                {messages.map(messag => {\r\n                                    return (\r\n                                        <ListItem>\r\n                                            <ListItemText primary={messag} />                            \r\n                                        </ListItem>      \r\n                                    )\r\n                                })}\r\n                            </Grid>\r\n                        </List>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n          \r\n                <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                        <Divider orientation=\"horizontal\" />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required              \r\n                    id=\"message\"\r\n                    label=\"Message\"\r\n                    name=\"message\"\r\n                    autoComplete=\"message\"\r\n                    autoFocus\r\n                    fullWidth\r\n                    value={message} \r\n                    onChange={ev => setMessage(ev.target.value)}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position='end'>\r\n                                <IconButton  onClick={sendMessage}>\r\n                                    <CommentIcon />\r\n                                </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                />\r\n                </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            \r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n\r\n/*\r\n  {messages.map(messag => {\r\n                                return (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={messag} />                            \r\n                                    </ListItem>      \r\n                                )\r\n                            })}\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}